project/
│── main.py
│── dal.py
│── requirements.txt
│── Dockerfile



from pymongo import MongoClient

class MongoDAL:
    def __init__(self, uri: str, db_name: str, collection: str):
        self.client = MongoClient(uri)
        self.db = self.client[db_name]
        self.collection = self.db[collection]

    def insert_one(self, data: dict):
        return self.collection.insert_one(data).inserted_id

    def find_all(self):
        return list(self.collection.find({}, {"_id": 0}))  # בלי _id

    def find_by_field(self, field: str, value: str):
        return list(self.collection.find({field: value}, {"_id": 0}))


from fastapi import FastAPI
from dal import MongoDAL

app = FastAPI()

# שם הקונטיינר של MongoDB יהיה "mongodb"
mongo = MongoDAL(uri="mongodb://mongodb:27017/", db_name="mydb", collection="users")

@app.post("/users")
async def create_user(user: dict):
    user_id = mongo.insert_one(user)
    return {"inserted_id": str(user_id)}

@app.get("/users")
async def get_users():
    return mongo.find_all()

@app.get("/users/{field}/{value}")
async def get_user_by_field(field: str, value: str):
    return mongo.find_by_field(field, value)


fastapi
uvicorn[standard]
pymongo


FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]



docker network create my_network
docker pull mongodb/mongodb-community-server:latest

docker run -d --name mongodb --network my_network -p 27017:27017 mongodb/mongodb-community-server:latest
docker build -t my_app .
docker run -d --name my_app --network my_network -p 8000:8000 my_app
שלב 4: בדיקה

הוסף משתמש:
curl -X POST "http://localhost:8000/users" -H "Content-Type: application/json" -d '{"name":"David","age":30}'
שלוף את כל המשתמשים:

curl http://localhost:8000/users
📌 סיכום

MongoDB רץ בקונטיינר אחד.

FastAPI רץ בקונטיינר אחר.

שניהם מחוברים דרך Docker Network.

הקוד שלך ניגש ל־MongoDB לפי שם הקונטיינר (mongodb) ולא לפי IP.




עוד אופציה
from fastapi import FastAPI
from pydantic import BaseModel
from dal import MongoDAL

app = FastAPI()

# שם הקונטיינר של MongoDB יהיה "mongodb"
mongo = MongoDAL(uri="mongodb://mongodb:27017/", db_name="mydb", collection="users")

# מודל נתונים
class User(BaseModel):
    name: str
    age: int

@app.post("/users")
async def create_user(user: User):
    user_id = mongo.insert_one(user.dict())  # המרה ל־dict
    return {"inserted_id": str(user_id)}

@app.get("/users")
async def get_users():
    return mongo.find_all()

@app.get("/users/{field}/{value}")
async def get_user_by_field(field: str, value: str):
    return mongo.find_by_field(field, value)

מה השתנה כאן?

במקום לקבל user: dict → עכשיו זה user: User.

FastAPI יעשה ולידציה לפי ה־schema של User.

user.dict() הופך את ה־User חזרה ל־dict לפני שמכניסים ל־MongoDB.


יתרון נוסף

ב־Swagger UI (http://localhost:8000/docs) תראה את המודל בצורה מסודרת:

{
  "name": "David",
  "age": 30
}

עוד אופציה
from fastapi import FastAPI
from pydantic import BaseModel
from dal import MongoDAL

app = FastAPI()

# חיבור ל־MongoDB (שם הקונטיינר: mongodb)
mongo = MongoDAL(uri="mongodb://mongodb:27017/", db_name="mydb", collection="users")

# --- מודלים ---

# קלט: משתמש שנכנס
class UserIn(BaseModel):
    name: str
    age: int

# פלט: משתמש שיוצא
class UserOut(BaseModel):
    name: str
    age: int

# פלט: תגובה אחרי יצירה
class CreateResponse(BaseModel):
    inserted_id: str


# --- ראוטים ---

@app.post("/users", response_model=CreateResponse)
async def create_user(user: UserIn):
    user_id = mongo.insert_one(user.dict())  # המרה ל־dict
    return {"inserted_id": str(user_id)}


@app.get("/users", response_model=list[UserOut])
async def get_users():
    return mongo.find_all()


@app.get("/users/{field}/{value}", response_model=list[UserOut])
async def get_user_by_field(field: str, value: str):
    return mongo.find_by_field(field, value)


import requests

# GET
response = requests.get("http://localhost:8000/users")

# POST
response = requests.post("http://localhost:8000/users", json={"name": "David"})





